# shellcheck shell=bash
version="01"

help_short="wslgsu [-u USERNAME] [-n NAME] [-S] SERVICE/COMMAND\nwslgsu [-hv]"

isService=0
wa_gs_commd=""
wa_gs_name=""
wa_gs_user="root"

while [ "$1" != "" ]; do
	case "$1" in
		-u|--user) shift; wa_gs_user="$1"; shift;;
		-n|--name) shift; wa_gs_name="$1"; shift;;
		-S|--service) isService=1; shift;;
		-h|--help) help "wslact" "$help_short"; exit;;
		*) wa_gs_commd="$*";break;;
	esac
done

if [[ "$wa_gs_commd" != "" ]]; then
	tmp_location="$(wslvar -s TMP)"
	up_location=""
	tpath="$(double_dash_p "$tmp_location")" # Windows Temp, Win Double Sty.
	tpath_linux="$(wslpath "$tmp_location")" # Windows Temp, Linux WSL Sty.
	script_location_win="$(wslvar -s USERPROFILE)\\wslu" #  Windows wslu, Win Double Sty.
	script_location="$(wslpath "$script_location_win")" # Windows wslu, Linux WSL Sty.

	# Check presence of sudo.ps1 and 
	wslu_file_check "$script_location" "sudo.ps1"
	wslu_file_check "$script_location" "runHidden.vbs"

	# check if it is a service or a command
	if [[ $isService -eq 1 ]]; then
	# service
		# handling no name given case
		if [[ "$wa_gs_name" = "" ]]; then
			wa_gs_name="$wa_gs_commd"
		fi
		wa_gs_commd="wsl.exe -d $WSL_DISTRO_NAME -u $wa_gs_user service $wa_gs_commd start"
	else
	# command
		# handling no name given case
		if [[ "$wa_gs_name" = "" ]]; then
			wa_gs_name=$(basename "$(echo "$wa_gs_commd" | awk '{print $1}')")
		fi
		wa_gs_commd="wsl.exe -d $WSL_DISTRO_NAME -u $wa_gs_user $wa_gs_commd"
	fi

	# shellcheck disable=SC2028
	tee "$tpath_linux"/tmp.ps1 << EOF
Import-Module 'C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules\\Microsoft.PowerShell.Utility\\Microsoft.PowerShell.Utility.psd1';\$action = New-ScheduledTaskAction -Execute 'C:\\Windows\\System32\\wscript.exe'  -Argument '$script_location_win\\runHidden.vbs $wa_gs_commd';
\$trigger =  New-ScheduledTaskTrigger -AtLogOn -User \$env:userdomain\\\$env:username; \$task = New-ScheduledTask -Action \$action -Trigger \$trigger -Description \"Start service $wa_gs_name from $WSL_DISTRO_NAME when computer start up; Generated By WSL Utilities\";
Register-ScheduledTask -InputObject \$task -TaskPath '\\' -TaskName 'WSLUtilities_Actions_Startup_$wa_gs_name';
EOF
	echo "${warn} WSL Utilities is adding \"${wa_gs_name}\" to Task Scheduler; A UAC Prompt will show up later. Allow it if you know what you are doing."
	if winps_exec "$script_location_win"\\sudo.ps1 "$tpath"\\tmp.ps1; then
		rm -rf "$tpath_linux/tmp.ps1"
		echo "${info} Startup \"${wa_gs_name}\" added."

	else
		rm -rf "$tpath_linux/tmp.ps1"
		echo "${error} Adding Startup \"${wa_gs_name}\" failed."
		exit 1
	fi
else
	echo "${error} No input, aborting"
	exit 21
fi

unset isService
unset wa_gs_commd
unset wa_gs_name
unset wa_gs_user
